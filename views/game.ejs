<!--EJS for the signup page-->
<!DOCTYPE html>
<html lang='en'>
 <head>
    <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1.0">
      <link rel="stylesheet"
        type="text/css"
        href="game.css">
    <title>Krejci Uno</title>
 </head>
    <body>

      <!--Title HTML-->
      <header>
        <h1 id="unoTitle">Classic Game</h1>
      </header>

    <!--HTML For The Game-->
      <main>
          <!--Insert Game Stuff Here-->
          <h1 id="nums"></h1>
          <!--Testing for loops for future cards-->
      </main>
        
    <!--Div tag for the oppenents cards-->
    <div id="oppenCards">

    </div>

    <!--Div tag for the deck and playing cards-->
    <div id="playCards">

    </div>

    <!--Div tag for the users cards-->
    <div id="userCards">
      <h2 id="cardStatus"></h2>
    </div>

    </body>

    <script>
      //JavaScript for the game functionality
      let text = ""

      //MAYBE USE 'document.write("<html id="give img id"></html>")' to show images
      /**
      for (var i = 0; i < 10; i++) {
        text += "\tNumber" + i
      }
      document.getElementById("nums").innerHTML = text
      */

      //document.write("<h1 id='img'>image</h1>") //You're able to connect to css through this and use ids!


      //THE CODE

      //Global variables

      //The card list for total cards we'll have
      const playingCards = []

      //The cards that are currently in play (needs to be dynamic)
      let playedCards = []

      //The cards that the oppenent currently has
      let oppenentCards = []

      //The cards that the user currently has
      let userCards = []

      //Variable to be used to determine the current color of the card in play (needs to be used so we can perform wild card situations)
      //initialized as an empty string 
      let colorPlaying = ""

      //Also the current number or ability being played for further analysis
      //REMEMBER THIS WILL TIE TO ITS PROPERTY AS WELL IF ITS A WILD/REVERSE/SKIP... CARD!!!!
      let numberPlaying = ""

      //Functions

      //Function that performs when a card is clicked
      function clickCard() {
        //WE NEED TO APPEND TO CURRENT DOC OR A WHOLE NEW ONE WILL BE CREATED!!
        //document.body.append("Click") TEST FOR CLICK ACTION!!

        //Now lets see if we can get specific card info STUCK HERE!!
        document.body.append("Card")
      }

      //Function that is used to shuffle the card array to get random cards
      //Using the Fisher-Yates algorithm to shuffle the cards
      function shuffleCards(cards) {
        var j, x, i;
        for (i = cards.length - 1; i > 0; i--) {
            j = Math.floor(Math.random() * (i + 1));
            x = cards[i];
            cards[i] = cards[j];
            cards[j] = x;
        }
        return cards;
      }

      //Function to create all of the card objects for all colors and types and adding them to the card list
      function createCardList() {

        //Current number that we're counting for the card
        var currNum = ""

        //List of all the color strings
        const colors = ["blue", "green", "red", "yellow"]

        //Loop for creating the color cards (52 color cards)
        for (var i = 0; i <= 12; i++) {
          //If i is on 0 add card one for each color to the pile
          if (i == 0) {
            //Current number is on zero
            currNum = "Zero"

            //Create each zero object 
            //Blue
            const blueZero = {
              color: "blue",
              number: "zero",
              imgLink: "blueZero.jpg"
            }
            playingCards.push(blueZero)

            //Green
            const greenZero = {
              color: "green",
              number: "zero",
              imgLink: "greenZero.jpg"
            }
            playingCards.push(greenZero)


            //Red
            const redZero = {
              color: "red",
              number: "zero",
              imgLink: "redZero.jpg"
            }
            playingCards.push(redZero)

            //Yellow
            const yellowZero = {
              color: "yellow",
              number: "zero",
              imgLink: "yellowZero.jpg"
            }
            playingCards.push(yellowZero)



          } else if (i == 1) {
            //Current number is on one
            currNum = "One"

            //Create each one object 
            //Blue
            const blueOne = {
              color: "blue",
              number: "one",
              imgLink: "blueOne.jpg"
            }
            playingCards.push(blueOne)

            //Green
            const greenOne = {
              color: "green",
              number: "one",
              imgLink: "greenOne.jpg"
            }
            playingCards.push(greenOne)


            //Red
            const redOne = {
              color: "red",
              number: "one",
              imgLink: "redOne.jpg"
            }
            playingCards.push(redOne)

            //Yellow
            const yellowOne = {
              color: "yellow",
              number: "one",
              imgLink: "yellowOne.jpg"
            }
            playingCards.push(yellowOne)

          } else if (i == 2) {
            //Current number is on two
            currNum = "Two"

            //Create each two object 
            //Blue
            const blueTwo = {
              color: "blue",
              number: "two",
              imgLink: "blueTwo.jpg"
            }
            playingCards.push(blueTwo)

            //Green
            const greenTwo = {
              color: "green",
              number: "two",
              imgLink: "greenTwo.jpg"
            }
            playingCards.push(greenTwo)


            //Red
            const redTwo = {
              color: "red",
              number: "two",
              imgLink: "redTwo.jpg"
            }
            playingCards.push(redTwo)

            //Yellow
            const yellowTwo = {
              color: "yellow",
              number: "two",
              imgLink: "yellowTwo.jpg"
            }
            playingCards.push(yellowTwo)

          } else if (i == 3) {
            //Currrent number is on three
            currNum = "Three"

            //Create each three object 
            //Blue
            const blueThree = {
              color: "blue",
              number: "three",
              imgLink: "blueThree.jpg"
            }
            playingCards.push(blueThree)

            //Green
            const greenThree = {
              color: "green",
              number: "three",
              imgLink: "greenThree.jpg"
            }
            playingCards.push(greenThree)


            //Red
            const redThree = {
              color: "red",
              number: "three",
              imgLink: "redThree.jpg"
            }
            playingCards.push(redThree)

            //Yellow
            const yellowThree = {
              color: "yellow",
              number: "three",
              imgLink: "yellowThree.jpg"
            }
            playingCards.push(yellowThree)

          } else if (i == 4) {
            //Currrent number is on four

            //Create each four object 
            //Blue
            const blueFour = {
              color: "blue",
              number: "four",
              imgLink: "blueFour.jpg"
            }
            playingCards.push(blueFour)

            //Green
            const greenFour = {
              color: "green",
              number: "four",
              imgLink: "greenFour.jpg"
            }
            playingCards.push(greenFour)

            //Red
            const redFour = {
              color: "red",
              number: "four",
              imgLink: "redFour.jpg"
            }
            playingCards.push(redFour)

            //Yellow
            const yellowFour = {
              color: "yellow",
              number: "four",
              imgLink: "yellowFour.jpg"
            }
            playingCards.push(yellowFour)
            currNum = "Four"

          } else if (i == 5) {
            currNum = "Five"

            //Create each five object 
            //Blue
            const blueFive = {
              color: "blue",
              number: "five",
              imgLink: "blueFive.jpg"
            }
            playingCards.push(blueFive)

            //Green
            const greenFive = {
              color: "green",
              number: "five",
              imgLink: "greenFive.jpg"
            }
            playingCards.push(greenFive)

            //Red
            const redFive = {
              color: "red",
              number: "five",
              imgLink: "redFive.jpg"
            }
            playingCards.push(redFive)

            //Yellow
            const yellowFive = {
              color: "yellow",
              number: "five",
              imgLink: "yellowFive.jpg"
            }
            playingCards.push(yellowFive)

          } else if (i == 6) {
            currNum = "Six"

            //Create each six object 
            //Blue
            const blueSix = {
              color: "blue",
              number: "six",
              imgLink: "blueSix.jpg"
            }
            playingCards.push(blueSix)

            //Green
            const greenSix = {
              color: "green",
              number: "six",
              imgLink: "greenSix.jpg"
            }
            playingCards.push(greenSix)

            //Red
            const redSix = {
              color: "red",
              number: "six",
              imgLink: "redSix.jpg"
            }
            playingCards.push(redSix)

            //Yellow
            const yellowSix = {
              color: "yellow",
              number: "six",
              imgLink: "yellowSix.jpg"
            }
            playingCards.push(yellowSix)

          } else if (i == 7) {
            currNum = "Seven"

            //Create each seven object 
            //Blue
            const blueSeven = {
              color: "blue",
              number: "seven",
              imgLink: "blueSeven.jpg"
            }
            playingCards.push(blueSeven)

            //Green
            const greenSeven = {
              color: "green",
              number: "seven",
              imgLink: "greenSeven.jpg"
            }
            playingCards.push(greenSeven)

            //Red
            const redSeven = {
              color: "red",
              number: "seven",
              imgLink: "redSeven.jpg"
            }
            playingCards.push(redSeven)

            //Yellow
            const yellowSeven = {
              color: "yellow",
              number: "seven",
              imgLink: "yellowSeven.jpg"
            }
            playingCards.push(yellowSeven)

            
          } else if (i == 8) {
            currNum = "Eight"

            //Create each eight object 
            //Blue
            const blueEight = {
              color: "blue",
              number: "eight",
              imgLink: "blueEight.jpg"
            }
            playingCards.push(blueEight)

            //Green
            const greenEight = {
              color: "green",
              number: "eight",
              imgLink: "greenEight.jpg"
            }
            playingCards.push(greenEight)

            //Red
            const redEight = {
              color: "red",
              number: "eight",
              imgLink: "redEight.jpg"
            }
            playingCards.push(redEight)

            //Yellow
            const yellowEight = {
              color: "yellow",
              number: "eight",
              imgLink: "yellowEight.jpg"
            }
            playingCards.push(yellowEight)

          } else if (i == 9) {
            currNum = "Nine"

            //Create each nine object 
            //Blue
            const blueNine = {
              color: "blue",
              number: "nine",
              imgLink: "blueNine.jpg"
            }
            playingCards.push(blueNine)

            //Green
            const greenNine = {
              color: "green",
              number: "nine",
              imgLink: "greenNine.jpg"
            }
            playingCards.push(greenNine)

            //Red
            const redNine = {
              color: "red",
              number: "nine",
              imgLink: "redNine.jpg"
            }
            playingCards.push(redNine)

            //Yellow
            const yellowNine = {
              color: "yellow",
              number: "nine",
              imgLink: "yellowNine.jpg"
            }
            playingCards.push(yellowNine)

          } else if (i == 10) {
            //Current number is on a skip
            currNum = "Skip"

            //Create each skip object 
            //Blue
            const blueSkip = {
              color: "blue",
              number: "skip",
              imgLink: "blueSkip.jpg"
            }
            playingCards.push(blueSkip)

            //Green
            const greenSkip = {
              color: "green",
              number: "skip",
              imgLink: "greenSkip.jpg"
            }
            playingCards.push(greenSkip)

            //Red
            const redSkip = {
              color: "red",
              number: "skip",
              imgLink: "redSkip.jpg"
            }
            playingCards.push(redSkip)

            //Yellow
            const yellowSkip = {
              color: "yellow",
              number: "skip",
              imgLink: "yellowSkip.jpg"
            }
            playingCards.push(yellowSkip)

          } else if (i == 11) {
            //Current number is on a reverse
            currNum = "Reverse"

            //Create each six object 
            //Blue
            const blueReverse = {
              color: "blue",
              number: "reverse",
              imgLink: "blueReverse.jpg"
            }
            playingCards.push(blueReverse)

            //Green
            const greenReverse = {
              color: "green",
              number: "reverse",
              imgLink: "greenReverse.jpg"
            }
            playingCards.push(greenReverse)

            //Red
            const redReverse = {
              color: "red",
              number: "reverse",
              imgLink: "redReverse.jpg"
            }
            playingCards.push(redReverse)

            //Yellow
            const yellowReverse = {
              color: "yellow",
              number: "reverse",
              imgLink: "yellowReverse.jpg"
            }
            playingCards.push(yellowReverse)

          } else if (i == 12) {
            //Current number is on a plus 2
            currNum = "PlusTwo"
          
            //Create each six object 
            //Blue
            const bluePlusTwo = {
              color: "blue",
              number: "PlusTwo",
              imgLink: "bluePlusTwo.jpg"
            }
            playingCards.push(bluePlusTwo)

            //Green
            const greenPlusTwo = {
              color: "green",
              number: "PlusTwo",
              imgLink: "greenPlusTwo.jpg"
            }
            playingCards.push(greenPlusTwo)

            //Red
            const redPlusTwo = {
              color: "red",
              number: "PlusTwo",
              imgLink: "redPlusTwo.jpg"
            }
            playingCards.push(redPlusTwo)

            //Yellow
            const yellowPlusTwo = {
              color: "yellow",
              number: "PlusTwo",
              imgLink: "yellowPlusTwo.jpg"
            }
            playingCards.push(yellowPlusTwo)
        }
      }

        //Create four different wild cards and add them (was going to do a loop but it kept crashing the website then later found out that we were still in the previous loop for whatever reason this can change.)
        const plusFour = {
            color: "wild",
            number: "PlusFour",
            imgLink: "PlusFour.jpg"
        }
        playingCards.push(plusFour)

        //Create change color object and add to list
        const changeColor = {
          color: "wild",
          number: "ChangeColor",
          imgLink: "ChangeColor.jpg"
        }
        playingCards.push(changeColor)

        //Two three four
        const plusFour2 = {
            color: "wild",
            number: "PlusFour",
            imgLink: "PlusFour.jpg"
        }
        playingCards.push(plusFour2)

        //Create change color object and add to list
        const changeColor2 = {
          color: "wild",
          number: "ChangeColor",
          imgLink: "ChangeColor.jpg"
        }
        playingCards.push(changeColor2)
      

      const plusFour3 = {
            color: "wild",
            number: "PlusFour",
            imgLink: "PlusFour.jpg"
        }
        playingCards.push(plusFour3)

        //Create change color object and add to list
        const changeColor3 = {
          color: "wild",
          number: "ChangeColor",
          imgLink: "ChangeColor.jpg"
        }
        playingCards.push(changeColor3)

        const plusFour4 = {
            color: "wild",
            number: "PlusFour",
            imgLink: "PlusFour.jpg"
        }
        playingCards.push(plusFour4)

        //Create change color object and add to list
        const changeColor4 = {
          color: "wild",
          number: "ChangeColor",
          imgLink: "ChangeColor.jpg"
        }
        playingCards.push(changeColor4)
      
    }
    
    
      /**
       * SO FROM WHAT WE LEARN CREATE ARRAYS WITH LIST OBJECTS AND CALL THE REFERENCES OF THE LINK TO DISPLAY THEM
       * AND YOU CAN ADD CLICKABLE EVENTS TO THEM TO RESPOND TO WHAT'S GOING ON, AND ALSO TRY AND MAKE IT TO WHERE
       * A CARD IS A WHOLE OBJECT INLCUDING THE SRC LINK, CARD NUMBER, COLOR, ETC...
      */
      

      //Get the array full of the cards using the createCardList() function
      createCardList()

      //Get an array of the one above but shuffled
      let shuffledCards = shuffleCards(playingCards)
      console.log("shuffled cards START:", shuffledCards)

      //Check the card list
      //console.log("All the cards:", playingCards)

    
      //Lets see if we can select all the cards and display them
      //This will be the cards for the oppenentCards list
      for (var card = 0; card <= 6; card++) {
        //Creating a variable with an image
        var img = document.createElement("img")
        //console.log("Current card:", shuffledCards[card].imgLink)
        let currCard = shuffledCards[card].imgLink
        let currCardNum = shuffledCards[card].number
        let currCardColor = shuffledCards[card].color
        console.log("Type of for currCard:", typeof(currCard)) //Get the type for the currCard variable
        
        img.src = "/img/backCard.jpg"
        console.log("image source:", img.src)
        img.width = 112.5
        img.height = 225
        img.id = card
        img.className = "card" //Now use .card in css to mess with the css of these cards in that page
        
        //Remove click event after adding the code to the user card version
        img.addEventListener("click", function() {


          //THIS IS WHERE I LEFT OFF LAST!!
          //Putting currCard gives clicked card img link 
          //Putting currCardNum gives clicked card number or property for skips, wild, plus twos, reverse
          //Putting currCardColor gives the color of a clicked card
          document.body.append("Card Color: " + currCardColor + "\n") //THIS WORKED TO GET SPECIFIC CARD LINK WHEN CLICKING ON EACH DIFFERENT IMAGE!!! IT WOORRKED YAAY!! 6/7/2022
          document.body.append("Card Number/Property: " + currCardNum + "\n")
          document.body.append("Card Link: " + currCard + "\n")
          
          //Or do this, you can call other functions outside here
          //clickCard(img)
          //console.log("The card:", card)
        })
        //Add to the oppenent cards div tag
        document.getElementById("oppenCards").appendChild(img);
        
        //Add the current card to the opponnent
        oppenentCards.push(shuffledCards[card])

        //Remove the current card that was in the the shuffled card deck that was just passed out
        shuffledCards.shift()
      }

      console.log("Array after removing cards:", shuffledCards)

      //Now add the card that will be in play below the computers cards and the deck
      var imgPlayed = document.createElement("img")
      //The source of the the first card in the shuffled card list is the one in play

      //For the card in play we can't use a wild card or skips!! FIXED!!
      //Run a loop that loops through the suffledCards array until you get a valid card then make it the image source
      //then add it to the playedCards array and 

      for (var card = 0; card < shuffledCards.length; card++) {

        //Current color of card object WORKS
        //console.log("IN THE SHUFFLE CARD LOOP:", shuffledCards[card].color)

        //If you don't have a wild card we may be able to put it down
        if (shuffledCards[card].color != "wild") {
          //console.log("IN THE SHUFFLE CARD LOOP:", shuffledCards[card].color)
          //Now if we also don't have any skips or reverses make the rest of imgPlayed properties according to this card
          //We also can't have plus twos!
          if ((shuffledCards[card].number != "reverse") && (shuffledCards[card].number != "skip") && (shuffledCards[card].number != "PlusTwo")) {
            console.log("IN THE LOOP:", shuffledCards[card].number)
            //Now we have a valid card! Start the game out with it then!
            let playingSource = shuffledCards[card].imgLink

            if (shuffledCards[card].color == "blue") {
                imgPlayed.src = "/img/BlueCards/" + playingSource
              } else if (shuffledCards[card].color == "red") {
                imgPlayed.src = "/img/RedCards/" + playingSource

              } else if (shuffledCards[card].color == "green") {
                imgPlayed.src = "/img/GreenCards/" + playingSource

              } else if (shuffledCards[card].color == "yellow") {
                imgPlayed.src = "/img/YellowCards/" + playingSource

              } else if (shuffledCards[card].color == "wild") {
                imgPlayed.src = "/img/WildCards/" + playingSource
              }
            imgPlayed.width = 112.5
            imgPlayed.height = 225
            imgPlayed.className = "cardPlaying" //Now use .card in css to mess with the css of these cards in that page

            //add to the play cards div tag playCards
            document.getElementById("playCards").appendChild(imgPlayed);

            //This card also has to be accounted for current cards in play
            playedCards.push(shuffledCards[card])
            
            //This card will also be the current card in play so its color is what color that is currently valid
            //so change the colorPlaying variable to its color
            colorPlaying = shuffledCards[card].color

            //Also check the number being played
            numberPlaying = shuffledCards[card].number

            //MAKE SURE TO DO BOTH ABOVE FOR VALIDNESS BEFOOORREE SPLICING THE ARRAY OR IT WILL TAKE THE NEXT CARD IN THAT POSITION!!!! FIXED!!

            //Now we need to remove the current card from the shuffled cards array
            shuffledCards.splice(card, 1)

            break

          }
        }

      }

      //Now lets check what the current color in play is to match for valid colors
      //Also, now that we have this data we can put it to the screen for the user's reference for a next valid card!
      //Show this information next to the deck of cards in the next set of code that does that
      console.log("CURRENT VALID COLOR AND NUMBER AFTER STARTING THE GAME:", colorPlaying, numberPlaying)
      
      //Now check the shuffled cards array to make sure the one put down isn't in the array anymore
      console.log("THE ARRAY OF SHUFFLED CARDS AFTER REMOVING CURRENT ONE IN PLAY", shuffledCards)
      
      //Add an image of the back of a card next to the card in play for illusion of a deck
      var imgDeck = document.createElement("img")
      imgDeck.src = "/img/backCard.jpg"
      imgDeck.width = 125
      imgDeck.height = 250
      imgDeck.className = "cardDeck" //Now use .card in css to mess with the css of these cards in that page

      //Add this to the play cards div tag as well playCards
      document.getElementById("playCards").appendChild(imgDeck);

      //Add an event listener to the deck in which clicking it will add card to users card array list and show it
      imgDeck.addEventListener("click", function() {
        console.log("USER ARRAY BEFORE ADDING A NEW CARD:", userCards)
        console.log("SHUFFLED CARDS ARRAY BEFORE REMOVING A CARD:", shuffledCards)

        //Take the last card in the shuffled cards array (length of shuffled cards - 1) set (use pop())
        let newCard = shuffledCards.pop()

        //Add it to the user cards array
        userCards.push(newCard)

        //So now the new card's index would be the lenght of the user's list minus 1
        let card = userCards.length - 1

        //Show it on the screen append child to user screen
        //Creating a variable with an image
        var img = document.createElement("img")
        let currCard = userCards[card].imgLink
        let currCardNum = userCards[card].number
        let currCardColor = userCards[card].color
        
        //If we're using blue cards use the blue cards folder... etc
        
        if (userCards[card].color == "blue") {
          img.src = "/img/BlueCards/" + currCard
        } else if (userCards[card].color == "red") {
          img.src = "/img/RedCards/" + currCard

        } else if (userCards[card].color == "green") {
          img.src = "/img/GreenCards/" + currCard

        } else if (userCards[card].color == "yellow") {
          img.src = "/img/YellowCards/" + currCard

        } else if (userCards[card].color == "wild") {
          img.src = "/img/WildCards/" + currCard
        }
        
        img.width = 112.5
        img.height = 225
        img.id = card
        img.className = "cardUser" //Now use .card in css to mess with the css of these cards in that page

        //Now add the card to the screen where the user's cards are
        document.getElementById("userCards").appendChild(img);

        //Remove click event after adding the code to the user card version
        img.addEventListener("click", function() {


          //Putting currCard gives clicked card img link 
          //Putting currCardNum gives clicked card number or property for skips, wild, plus twos, reverse
          //Putting currCardColor gives the color of a clicked card
          //document.body.append("Card Color: " + currCardColor + "\n") //THIS WORKED TO GET SPECIFIC CARD LINK WHEN CLICKING ON EACH DIFFERENT IMAGE!!! IT WOORRKED YAAY!! 6/7/2022
          //document.body.append("Card Number/Property: " + currCardNum + "\n")
          //document.body.append("Card Link: " + currCard + "\n")

          //NOW FOR THE REAL FUNCTIONALITY
          console.log("Clicked Card Color: " + currCardColor + "\n")
          console.log("Clicked Card Number/Property: " + currCardNum + "\n")
          console.log("Clicked Card Link: " + currCard + "\n")

          //Now lets see if the current card clicked can be used using a variable that changes to "valid" when it's valid
          let validity = ""

          //First lets check what the current card in play is
          console.log("The card that is in play when we clicked this card: " + colorPlaying + " " + numberPlaying)

          //Now if colorPlaying == color of current clicked card we can play it
          if (currCardColor == colorPlaying) {
            //Tell the console we have a valid card
            console.log("Valid Card!")
            validity = "valid"

          //If we have a card that's not the same color but the same number/property it is valid
          } else if (currCardNum == numberPlaying) {
            console.log("Valid Card!")
            validity = "valid"

          //If we don't have the above but we're playing a wild card it's valid!
          //Remember it's wild value is under .color and its number will tell you if it's a plus four or change color
          } else if (currCardColor == "wild") {
            console.log("Valid Card!")
            validity = "valid"

          //If none of the above checks out, we have an invalid card!
          } else {
            console.log("Invalid Card!")
            validity = "invalid"
          } 

          //Now take action according to validity
          if (validity == "valid") {
            //
          }

          //If it was a valid move, add it to the cards in play array and remove it from the user cards array then add the 
          //image object to the cards in play div tag
          })

      })
      //Add the status of the game for the next valid color or number
      document.getElementById("cardStatus").innerHTML = "Valid Color: " + colorPlaying + " Valid Number: " + numberPlaying

      //Then use the above loop to give the current user the cards they have
      //REMEMBER THE CURRENT CARD IN PLAY WILL BE THE LAST CARD IN THE PLAYEDCARDS LIST!!!!
      for (var card = 0; card <= 6; card++) {
        //Creating a variable with an image
        var img = document.createElement("img")
        console.log("Current card:", shuffledCards[card].imgLink)
        let currCard = shuffledCards[card].imgLink
        let currCardNum = shuffledCards[card].number
        let currCardColor = shuffledCards[card].color
        console.log("Type of for currCard:", typeof(currCard)) //Get the type for the currCard variable
        
        //If we're using blue cards use the blue cards folder... etc
        
        if (shuffledCards[card].color == "blue") {
          img.src = "/img/BlueCards/" + currCard
        } else if (shuffledCards[card].color == "red") {
          img.src = "/img/RedCards/" + currCard

        } else if (shuffledCards[card].color == "green") {
          img.src = "/img/GreenCards/" + currCard

        } else if (shuffledCards[card].color == "yellow") {
          img.src = "/img/YellowCards/" + currCard

        } else if (shuffledCards[card].color == "wild") {
          img.src = "/img/WildCards/" + currCard
        }
        
        console.log("image source:", img.src)
        img.width = 112.5
        img.height = 225
        img.id = card
        img.className = "cardUser" //Now use .card in css to mess with the css of these cards in that page

        //Try and put the images in a div tag
        document.getElementById("userCards").appendChild(img);
        
        //Add the current card to the userCards list
        userCards.push(shuffledCards[card])

        //Remove the current card that was in the the shuffled card deck that was just passed out
        shuffledCards.shift()

        //Remove click event after adding the code to the user card version
        img.addEventListener("click", function() {


          //Putting currCard gives clicked card img link 
          //Putting currCardNum gives clicked card number or property for skips, wild, plus twos, reverse
          //Putting currCardColor gives the color of a clicked card
          //document.body.append("Card Color: " + currCardColor + "\n") //THIS WORKED TO GET SPECIFIC CARD LINK WHEN CLICKING ON EACH DIFFERENT IMAGE!!! IT WOORRKED YAAY!! 6/7/2022
          //document.body.append("Card Number/Property: " + currCardNum + "\n")
          //document.body.append("Card Link: " + currCard + "\n")

          //NOW FOR THE REAL FUNCTIONALITY
          console.log("Clicked Card Color: " + currCardColor + "\n")
          console.log("Clicked Card Number/Property: " + currCardNum + "\n")
          console.log("Clicked Card Link: " + currCard + "\n")

          //Now lets see if the current card clicked can be used using a variable that changes to "valid" when it's valid
          let validity = ""
          
          //First lets check what the current card in play is
          console.log("The card that is in play when we clicked this card: " + colorPlaying + " " + numberPlaying)

          //Now if colorPlaying == color of current clicked card we can play it
          if (currCardColor == colorPlaying) {
            //Tell the console we have a valid card
            console.log("Valid Card!")
            validity = "valid"

          //If we have a card that's not the same color but the same number/property it is valid
          } else if (currCardNum == numberPlaying) {
            console.log("Valid Card!")
            validity = "valid"

          //If we don't have the above but we're playing a wild card it's valid!
          //Remember it's wild value is under .color and its number will tell you if it's a plus four or change color
          } else if (currCardColor == "wild") {
            console.log("Valid Card!")
            validity = "valid"
          
          //If none of the above checks out, we have an invalid card!
          } else {
            console.log("Invalid Card!")
            validity = "invalid"
          } 

          //Now take action according to validity
          if (validity == "valid") {
            //
          }

          //If it was a valid move, add it to the cards in play array and remove it from the user cards array then add the 
          //REMEMBER WE'RE GONNA HAVE TO THEN UPDATE THE CLICK FUNCTION IN THE ONE WHERE WE ADD A CARD WHEN CLICKING THE DECK
          //SO I MIGHT NEED TO MAKE THIS A FUNCTION AS THE FUNCTIONALITY OF THE TWO WOULD BE IDENTICAL SUPERFLUOS SETS OF CODE
          
          //image object to the cards in play div tag
        })

      }
      
      //Now check the deck when you give out the cards to the user
      console.log("FINAL DECK BEFORE GAME START", shuffledCards)
      //Test with the card object WE ARE HERE
      //console.log("Image link:", blueOne.imgLink)

      /**Like in this example we can use looping through list of card references through something like
       * something like the the variable below, except try an make each an object or have an initial list of 
       * objects to work with making the card link card.imgLink, or something to that manner
      */

      //Have the back of the card represent a stack of cards, have the stack of cards be all the cards in a list
      

      //Practice Example
      /**
      let card = "blueTwo"
      img.src = "/img/BlueCards/" + card + ".jpg"
      img.width = 150
      img.height =300
      img.addEventListener("click", function() {
        //document.body.append("Click")
        //Or do this, you can call other functions outside here
        clickCard()
      })
      document.body.appendChild(img);
      //document.write(img)
      */
    

    /**Notes moving forward:
     * If we aren't able to remove an oppenent card in the loop where a user clicks a card, then we can also just have
     the user cards just be a bunch of random back facing cards in which the number of them needed is determined by the
     the length of the oppenents cards array, replacing the inner html of those back 'oppenent' cards each time. This
     way we can focus mainly on the backend when it comes to the oppenents moves instead of doing a bunch of unnecessary
     front end development work working with back facing cards that contain the oppenents card information.

     * Remember when a user puts down a wild card there needs to be functionality in the front and back end to change 
     the color in play according to what the user changes it to, as well as being able to have the oppenent be able to
     make the same decision somehow, maybe based on certain circumstances like picking the color they have the most of 
     for example. For the user this can consist of some sort of pop up that lets you select the color you want to change
     it to, then clicking a button when that decision has been made to update the current color in play, and this needs
     to be updated in the backend before the oppenent makes their next move.

     * When it comes to switching the current card in play VISUALLY in the HTML, take the current img and make that as
     a new inner html then maybe add the 'deck' aka a backward facing card as an add child statement after switching out
     the HTML for the current card in play. Then in the backend, update all the arrays necessary so that we are always 
     working with correct data by updating it. 

     * Also should add functionality to where if you click the deck it adds the next card in the shuffled cards array to the 
     current user's array and show that card on the screen.
    */
    </script>
</html>

